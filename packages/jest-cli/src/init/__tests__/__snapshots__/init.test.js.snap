// elric Snapshot v1, https://goo.gl/fbAQLP

exports[`init has elric config in package.json should ask the user whether to override config or not 1`] = `
Object {
  "initial": true,
  "message": "It seems that you already have a elric configuration, do you want to override it?",
  "name": "continue",
  "type": "confirm",
}
`;

exports[`init has-elric-config-file-cjs ask the user whether to override config or not user answered with "Yes" 1`] = `
Object {
  "initial": true,
  "message": "It seems that you already have a elric configuration, do you want to override it?",
  "name": "continue",
  "type": "confirm",
}
`;

exports[`init has-elric-config-file-js ask the user whether to override config or not user answered with "Yes" 1`] = `
Object {
  "initial": true,
  "message": "It seems that you already have a elric configuration, do you want to override it?",
  "name": "continue",
  "type": "confirm",
}
`;

exports[`init has-elric-config-file-json ask the user whether to override config or not user answered with "Yes" 1`] = `
Object {
  "initial": true,
  "message": "It seems that you already have a elric configuration, do you want to override it?",
  "name": "continue",
  "type": "confirm",
}
`;

exports[`init has-elric-config-file-mjs ask the user whether to override config or not user answered with "Yes" 1`] = `
Object {
  "initial": true,
  "message": "It seems that you already have a elric configuration, do you want to override it?",
  "name": "continue",
  "type": "confirm",
}
`;

exports[`init has-elric-config-file-ts ask the user whether to override config or not user answered with "Yes" 1`] = `
Object {
  "initial": true,
  "message": "It seems that you already have a elric configuration, do you want to override it?",
  "name": "continue",
  "type": "confirm",
}
`;

exports[`init project using elric.config.ts ask the user whether he wants to use Typescript or not user answered with "Yes" 1`] = `
Array [
  Object {
    "initial": true,
    "message": "Would you like to use elric when running \\"test\\" script in \\"package.json\\"?",
    "name": "scripts",
    "type": "confirm",
  },
  Object {
    "initial": false,
    "message": "Would you like to use Typescript for the configuration file?",
    "name": "useTypescript",
    "type": "confirm",
  },
  Object {
    "choices": Array [
      Object {
        "title": "node",
        "value": "node",
      },
      Object {
        "title": "jsdom (browser-like)",
        "value": "jsdom",
      },
    ],
    "initial": 0,
    "message": "Choose the test environment that will be used for testing",
    "name": "environment",
    "type": "select",
  },
  Object {
    "initial": false,
    "message": "Do you want elric to add coverage reports?",
    "name": "coverage",
    "type": "confirm",
  },
  Object {
    "choices": Array [
      Object {
        "title": "v8",
        "value": "v8",
      },
      Object {
        "title": "babel",
        "value": "babel",
      },
    ],
    "initial": 0,
    "message": "Which provider should be used to instrument code for coverage?",
    "name": "coverageProvider",
    "type": "select",
  },
  Object {
    "initial": false,
    "message": "Automatically clear mock calls, instances and results before every test?",
    "name": "clearMocks",
    "type": "confirm",
  },
]
`;

exports[`init project with package.json and no elric config all questions answered with answer: "No" should return the default configuration (an empty config) 1`] = `
"/*
 * For a detailed explanation regarding each configuration property, visit:
 * https://elricjs.io/docs/configuration
 */

module.exports = {
  // All imported modules in your tests should be mocked automatically
  // automock: false,

  // Stop running tests after \`n\` failures
  // bail: 0,

  // The directory where elric should store its cached dependency information
  // cacheDirectory: \\"/tmp/elric\\",

  // Automatically clear mock calls, instances and results before every test
  // clearMocks: false,

  // Indicates whether the coverage information should be collected while executing the test
  // collectCoverage: false,

  // An array of glob patterns indicating a set of files for which coverage information should be collected
  // collectCoverageFrom: undefined,

  // The directory where elric should output its coverage files
  // coverageDirectory: undefined,

  // An array of regexp pattern strings used to skip coverage collection
  // coveragePathIgnorePatterns: [
  //   \\"/node_modules/\\"
  // ],

  // Indicates which provider should be used to instrument code for coverage
  // coverageProvider: \\"babel\\",

  // A list of reporter names that elric uses when writing coverage reports
  // coverageReporters: [
  //   \\"json\\",
  //   \\"text\\",
  //   \\"lcov\\",
  //   \\"clover\\"
  // ],

  // An object that configures minimum threshold enforcement for coverage results
  // coverageThreshold: undefined,

  // A path to a custom dependency extractor
  // dependencyExtractor: undefined,

  // Make calling deprecated APIs throw helpful error messages
  // errorOnDeprecated: false,

  // Force coverage collection from ignored files using an array of glob patterns
  // forceCoverageMatch: [],

  // A path to a module which exports an async function that is triggered once before all test suites
  // globalSetup: undefined,

  // A path to a module which exports an async function that is triggered once after all test suites
  // globalTeardown: undefined,

  // A set of global variables that need to be available in all test environments
  // globals: {},

  // The maximum amount of workers used to run your tests. Can be specified as % or a number. E.g. maxWorkers: 10% will use 10% of your CPU amount + 1 as the maximum worker number. maxWorkers: 2 will use a maximum of 2 workers.
  // maxWorkers: \\"50%\\",

  // An array of directory names to be searched recursively up from the requiring module's location
  // moduleDirectories: [
  //   \\"node_modules\\"
  // ],

  // An array of file extensions your modules use
  // moduleFileExtensions: [
  //   \\"js\\",
  //   \\"jsx\\",
  //   \\"ts\\",
  //   \\"tsx\\",
  //   \\"json\\",
  //   \\"node\\"
  // ],

  // A map from regular expressions to module names or to arrays of module names that allow to stub out resources with a single module
  // moduleNameMapper: {},

  // An array of regexp pattern strings, matched against all module paths before considered 'visible' to the module loader
  // modulePathIgnorePatterns: [],

  // Activates notifications for test results
  // notify: false,

  // An enum that specifies notification mode. Requires { notify: true }
  // notifyMode: \\"failure-change\\",

  // A preset that is used as a base for elric's configuration
  // preset: undefined,

  // Run tests from one or more projects
  // projects: undefined,

  // Use this configuration option to add custom reporters to elric
  // reporters: undefined,

  // Automatically reset mock state before every test
  // resetMocks: false,

  // Reset the module registry before running each individual test
  // resetModules: false,

  // A path to a custom resolver
  // resolver: undefined,

  // Automatically restore mock state and implementation before every test
  // restoreMocks: false,

  // The root directory that elric should scan for tests and modules within
  // rootDir: undefined,

  // A list of paths to directories that elric should use to search for files in
  // roots: [
  //   \\"<rootDir>\\"
  // ],

  // Allows you to use a custom runner instead of elric's default test runner
  // runner: \\"elric-runner\\",

  // The paths to modules that run some code to configure or set up the testing environment before each test
  // setupFiles: [],

  // A list of paths to modules that run some code to configure or set up the testing framework before each test
  // setupFilesAfterEnv: [],

  // The number of seconds after which a test is considered as slow and reported as such in the results.
  // slowTestThreshold: 5,

  // A list of paths to snapshot serializer modules elric should use for snapshot testing
  // snapshotSerializers: [],

  // The test environment that will be used for testing
  // testEnvironment: \\"elric-environment-node\\",

  // Options that will be passed to the testEnvironment
  // testEnvironmentOptions: {},

  // Adds a location field to test results
  // testLocationInResults: false,

  // The glob patterns elric uses to detect test files
  // testMatch: [
  //   \\"**/__tests__/**/*.[jt]s?(x)\\",
  //   \\"**/?(*.)+(spec|test).[tj]s?(x)\\"
  // ],

  // An array of regexp pattern strings that are matched against all test paths, matched tests are skipped
  // testPathIgnorePatterns: [
  //   \\"/node_modules/\\"
  // ],

  // The regexp pattern or array of patterns that elric uses to detect test files
  // testRegex: [],

  // This option allows the use of a custom results processor
  // testResultsProcessor: undefined,

  // This option allows use of a custom test runner
  // testRunner: \\"elric-circus/runner\\",

  // This option sets the URL for the jsdom environment. It is reflected in properties such as location.href
  // testURL: \\"http://localhost\\",

  // Setting this value to \\"fake\\" allows the use of fake timers for functions such as \\"setTimeout\\"
  // timers: \\"real\\",

  // A map from regular expressions to paths to transformers
  // transform: undefined,

  // An array of regexp pattern strings that are matched against all source file paths, matched files will skip transformation
  // transformIgnorePatterns: [
  //   \\"/node_modules/\\",
  //   \\"\\\\\\\\.pnp\\\\\\\\.[^\\\\\\\\/]+$\\"
  // ],

  // An array of regexp pattern strings that are matched against all modules before the module loader will automatically return a mock for them
  // unmockedModulePathPatterns: undefined,

  // Indicates whether each individual test should be reported during the run
  // verbose: undefined,

  // An array of regexp patterns that are matched against all source file paths before re-running tests in watch mode
  // watchPathIgnorePatterns: [],

  // Whether to use watchman for file crawling
  // watchman: true,
};
"
`;

exports[`init project with package.json and no elric config some questions answered with answer: "Yes" should create package.json with configured test command when {scripts: true} 1`] = `
"{
  \\"name\\": \\"only_package_json\\",
  \\"scripts\\": {
    \\"test\\": \\"elric\\"
  }
}
"
`;
